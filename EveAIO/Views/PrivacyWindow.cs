namespace EveAIO.Views
{
    using EveAIO;
    using EveAIO.Privacy;
    using System;
    using System.CodeDom.Compiler;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Controls.Primitives;
    using System.Windows.Data;
    using System.Windows.Input;
    using System.Windows.Markup;
    using System.Windows.Media;

    public class PrivacyWindow : Window, IComponentConnector
    {
        internal Button BtnClose;
        internal ToggleButton switchPrivacy;
        internal ProgressBar progBarPrivacy;
        internal TextBlock lblLoadingText;
        internal TextBlock lblName;
        internal TextBox txtEmail;
        internal TextBlock lblPassword;
        internal TextBox txtPassword;
        internal TextBlock lblCaptcha;
        internal ComboBox cmbCaptchaService;
        internal GroupBox brGrid;
        public DataGrid gvCards;
        internal MenuItem contextBtnDelete;
        internal MenuItem contextBtnSelectAll;
        internal GroupBox brNewPrivacyCard;
        internal TextBox txtPrivacyNickName;
        internal RadioButton rPrivacyMerchant;
        internal RadioButton rPrivacyBurner;
        internal TextBox txtPrivacyLimit;
        internal Button btnPrivacyAddCard;
        private bool _contentLoaded;

        public PrivacyWindow(Window owner)
        {
            Class7.RIuqtBYzWxthF();
            this.InitializeComponent();
            base.Owner = owner;
        }

        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            base.Close();
        }

        private void BtnClose_Click(object sender, RoutedEventArgs e)
        {
            base.Close();
        }

        private void btnPrivacyAddCard_Click(object sender, RoutedEventArgs e)
        {
            if (this.PrivacyNewCardCheck() && !string.IsNullOrEmpty(Global.PRIVACY_MANAGER.CreateCard(this.txtPrivacyNickName.Text.Trim(), (!this.rPrivacyBurner.IsChecked.HasValue || !this.rPrivacyBurner.IsChecked.Value) ? PrivacyManager.PrivacyCardType.merchant : PrivacyManager.PrivacyCardType.burner, string.IsNullOrEmpty(this.txtPrivacyLimit.Text.Trim()) ? null : new int?(int.Parse(this.txtPrivacyLimit.Text.Trim())))))
            {
                Global.PRIVACY_MANAGER.LoadCards();
                this.gvCards.ItemsSource = null;
                ICollectionView defaultView = CollectionViewSource.GetDefaultView(Global.PRIVACY_MANAGER.Cards);
                this.gvCards.ItemsSource = defaultView;
                this.txtPrivacyLimit.Text = "";
                this.txtPrivacyNickName.Text = "";
            }
        }

        private void cmbCaptchaService_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            switch (((ComboBoxItem) this.cmbCaptchaService.SelectedItem).Tag.ToString())
            {
                case "manual":
                    Global.SETTINGS.PrivacyCaptchaService = CaptchaServiceType.Manual;
                    return;

                case "twocaptcha":
                    Global.SETTINGS.PrivacyCaptchaService = CaptchaServiceType.TwoCaptcha;
                    return;

                case "anticaptcha":
                    Global.SETTINGS.PrivacyCaptchaService = CaptchaServiceType.AntiCaptcha;
                    return;

                case "imagetypers":
                    Global.SETTINGS.PrivacyCaptchaService = CaptchaServiceType.ImageTypers;
                    return;
            }
        }

        private void contextBtnDelete_Click(object sender, RoutedEventArgs e)
        {
            List<string> list = new List<string>();
            foreach (PrivacyCard card in this.gvCards.SelectedItems)
            {
                list.Add(card.CardId);
            }
            foreach (string id in list)
            {
                PrivacyCard item = Global.PRIVACY_MANAGER.Cards.First<PrivacyCard>(x => x.CardId == id);
                if (Global.PRIVACY_MANAGER.DeleteCard(id))
                {
                    Global.PRIVACY_MANAGER.Cards.Remove(item);
                }
            }
        }

        private void contextBtnSelectAll_Click(object sender, RoutedEventArgs e)
        {
            this.gvCards.SelectAll();
        }

        private void Grid_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            base.DragMove();
        }

        private void gvCards_AutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (DataGridColumn column2 in this.gvCards.Columns)
            {
                if (column2.Header.ToString() != "Name")
                {
                    if (column2.Header.ToString() != "CardNumber")
                    {
                        if (column2.Header.ToString() != "Exp")
                        {
                            if (column2.Header.ToString() == "Cvv")
                            {
                                DataGridTextColumn column3 = column2 as DataGridTextColumn;
                                if (column3 != null)
                                {
                                    column3.Header = "CVV";
                                    column3.Width = 100.0;
                                    column3.FontSize = 14.0;
                                    column3.CanUserResize = false;
                                    column3.HeaderStyle = this.gvCards.FindResource("columnHeader") as Style;
                                    column3.ElementStyle = this.gvCards.FindResource("txtStyle") as Style;
                                }
                            }
                        }
                        else
                        {
                            DataGridTextColumn column = column2 as DataGridTextColumn;
                            if (column != null)
                            {
                                column.Header = "EXP";
                                column.Width = 100.0;
                                column.CanUserResize = false;
                                column.HeaderStyle = this.gvCards.FindResource("columnHeader") as Style;
                                column.ElementStyle = this.gvCards.FindResource("txtStyle") as Style;
                            }
                        }
                    }
                    else
                    {
                        DataGridTextColumn column5 = column2 as DataGridTextColumn;
                        if (column5 != null)
                        {
                            column5.Header = "CARD NUMBER";
                            column5.Width = 230.0;
                            column5.MinWidth = 150.0;
                            column5.HeaderStyle = this.gvCards.FindResource("columnHeader") as Style;
                            column5.ElementStyle = this.gvCards.FindResource("txtStyle") as Style;
                        }
                    }
                }
                else
                {
                    DataGridTextColumn column4 = column2 as DataGridTextColumn;
                    if (column4 != null)
                    {
                        column4.Header = "NICKNAME";
                        column4.Width = new DataGridLength(1.0, DataGridLengthUnitType.Star);
                        column4.MinWidth = 150.0;
                        column4.HeaderStyle = this.gvCards.FindResource("columnHeader") as Style;
                        column4.ElementStyle = this.gvCards.FindResource("txtStyle") as Style;
                    }
                }
            }
        }

        private void gvCards_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            switch (e.Column.Header.ToString())
            {
                case "CardId":
                    e.Column.Visibility = Visibility.Collapsed;
                    return;

                case "ExpMonth":
                    e.Column.Visibility = Visibility.Collapsed;
                    return;

                case "ExpYear":
                    e.Column.Visibility = Visibility.Collapsed;
                    break;
            }
        }

        private void gvCards_ContextMenuOpening(object sender, ContextMenuEventArgs e)
        {
            this.contextBtnDelete.IsEnabled = this.gvCards.SelectedItems.Count > 0;
        }

        [GeneratedCode("PresentationBuildTasks", "4.0.0.0"), DebuggerNonUserCode]
        public void InitializeComponent()
        {
            if (!this._contentLoaded)
            {
                this._contentLoaded = true;
                Uri resourceLocator = new Uri("/EveAIO;component/views/privacywindow.xaml", UriKind.Relative);
                Application.LoadComponent(this, resourceLocator);
            }
        }

        private void LoadCaptcha()
        {
            ComboBoxItem newItem = new ComboBoxItem {
                Content = "Manual",
                Tag = "manual"
            };
            this.cmbCaptchaService.Items.Add(newItem);
            ComboBoxItem item2 = new ComboBoxItem {
                Content = "TwoCaptcha",
                Tag = "twocaptcha"
            };
            this.cmbCaptchaService.Items.Add(item2);
            ComboBoxItem item3 = new ComboBoxItem {
                Content = "AntiCaptcha",
                Tag = "anticaptcha"
            };
            this.cmbCaptchaService.Items.Add(item3);
            ComboBoxItem item4 = new ComboBoxItem {
                Content = "ImageTypers",
                Tag = "imagetypers"
            };
            this.cmbCaptchaService.Items.Add(item4);
            using (IEnumerator enumerator = ((IEnumerable) this.cmbCaptchaService.Items).GetEnumerator())
            {
                ComboBoxItem item;
                goto Label_0104;
            Label_00CC:
                item = (ComboBoxItem) enumerator.Current;
                if (item.Tag.ToString() == Global.SETTINGS.PrivacyCaptchaService.ToString().ToLowerInvariant())
                {
                    goto Label_010E;
                }
            Label_0104:
                if (!enumerator.MoveNext())
                {
                    return;
                }
                goto Label_00CC;
            Label_010E:
                this.cmbCaptchaService.SelectedItem = item;
            }
        }

        private bool PrivacyNewCardCheck()
        {
            bool flag = true;
            if (string.IsNullOrEmpty(this.txtPrivacyNickName.Text))
            {
                this.txtPrivacyNickName.Background = (Brush) Application.Current.MainWindow.FindResource("MissingFieldBackground");
                flag = false;
            }
            else
            {
                this.txtPrivacyNickName.Background = (Brush) Application.Current.MainWindow.FindResource("FilledBackground");
            }
            if (this.rPrivacyBurner.IsChecked.HasValue && this.rPrivacyBurner.IsChecked.Value)
            {
                if (!string.IsNullOrEmpty(this.txtPrivacyLimit.Text))
                {
                    this.txtPrivacyLimit.Background = (Brush) Application.Current.MainWindow.FindResource("FilledBackground");
                    return flag;
                }
                this.txtPrivacyLimit.Background = (Brush) Application.Current.MainWindow.FindResource("MissingFieldBackground");
                return false;
            }
            this.txtPrivacyLimit.Background = (Brush) Application.Current.MainWindow.FindResource("FilledBackground");
            return flag;
        }

        private void switchLogin_Checked(object sender, RoutedEventArgs e)
        {
            if (this.switchPrivacy.IsChecked.HasValue && this.switchPrivacy.IsChecked.Value)
            {
                bool cont = false;
                this.txtEmail.Background = (Brush) Application.Current.MainWindow.FindResource("FilledBackground");
                this.txtPassword.Background = (Brush) Application.Current.MainWindow.FindResource("FilledBackground");
                if ((Global.PRIVACY_MANAGER != null) && Global.PRIVACY_MANAGER.IsLoggedIn)
                {
                    this.txtEmail.IsEnabled = false;
                    this.txtEmail.Opacity = 0.6;
                    this.txtPassword.IsEnabled = false;
                    this.txtPassword.Opacity = 0.6;
                    this.cmbCaptchaService.IsEnabled = false;
                    this.cmbCaptchaService.Opacity = 0.6;
                    this.brGrid.IsEnabled = true;
                    this.brGrid.Opacity = 1.0;
                    this.brNewPrivacyCard.IsEnabled = true;
                    this.brNewPrivacyCard.Opacity = 1.0;
                    ICollectionView defaultView = CollectionViewSource.GetDefaultView(Global.PRIVACY_MANAGER.Cards);
                    this.gvCards.ItemsSource = defaultView;
                }
                else
                {
                    TaskScheduler current;
                    if (SynchronizationContext.Current != null)
                    {
                        current = TaskScheduler.FromCurrentSynchronizationContext();
                    }
                    else
                    {
                        current = TaskScheduler.Current;
                    }
                    this.lblName.Visibility = Visibility.Hidden;
                    this.lblPassword.Visibility = Visibility.Hidden;
                    this.lblCaptcha.Visibility = Visibility.Hidden;
                    this.txtEmail.Visibility = Visibility.Hidden;
                    this.txtPassword.Visibility = Visibility.Hidden;
                    this.cmbCaptchaService.Visibility = Visibility.Hidden;
                    this.switchPrivacy.IsEnabled = false;
                    this.lblLoadingText.Visibility = Visibility.Visible;
                    this.progBarPrivacy.Visibility = Visibility.Visible;
                    this.progBarPrivacy.IsEnabled = true;
                    Task.Factory.StartNew(delegate {
                        Global.PRIVACY_MANAGER = new PrivacyManager();
                        Global.PRIVACY_MANAGER.Login();
                        if (Global.PRIVACY_MANAGER.IsLoggedIn)
                        {
                            cont = true;
                            Global.PRIVACY_MANAGER.LoadCards();
                        }
                    }).ContinueWith(delegate (Task t) {
                        this.switchPrivacy.IsEnabled = true;
                        this.lblLoadingText.Visibility = Visibility.Collapsed;
                        this.progBarPrivacy.Visibility = Visibility.Collapsed;
                        this.progBarPrivacy.IsEnabled = false;
                        if (!cont)
                        {
                            this.switchPrivacy.IsChecked = false;
                        }
                        else
                        {
                            this.txtEmail.IsEnabled = false;
                            this.txtEmail.Opacity = 0.6;
                            this.txtPassword.IsEnabled = false;
                            this.txtPassword.Opacity = 0.6;
                            this.cmbCaptchaService.IsEnabled = false;
                            this.cmbCaptchaService.Opacity = 0.6;
                            this.brGrid.IsEnabled = true;
                            this.brGrid.Opacity = 1.0;
                            this.brNewPrivacyCard.IsEnabled = true;
                            this.brNewPrivacyCard.Opacity = 1.0;
                            ICollectionView defaultView = CollectionViewSource.GetDefaultView(Global.PRIVACY_MANAGER.Cards);
                            this.gvCards.ItemsSource = defaultView;
                        }
                        this.lblName.Visibility = Visibility.Visible;
                        this.lblPassword.Visibility = Visibility.Visible;
                        this.lblCaptcha.Visibility = Visibility.Visible;
                        this.txtEmail.Visibility = Visibility.Visible;
                        this.txtPassword.Visibility = Visibility.Visible;
                        this.cmbCaptchaService.Visibility = Visibility.Visible;
                    }, current);
                }
            }
            else
            {
                this.txtEmail.IsEnabled = true;
                this.txtEmail.Opacity = 1.0;
                this.txtPassword.IsEnabled = true;
                this.txtPassword.Opacity = 1.0;
                this.cmbCaptchaService.IsEnabled = true;
                this.cmbCaptchaService.Opacity = 1.0;
                this.brGrid.IsEnabled = false;
                this.brGrid.Opacity = 0.6;
                this.brNewPrivacyCard.IsEnabled = false;
                this.brNewPrivacyCard.Opacity = 0.6;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), GeneratedCode("PresentationBuildTasks", "4.0.0.0"), DebuggerNonUserCode]
        void IComponentConnector.Connect(int connectionId, object target)
        {
            switch (connectionId)
            {
                case 1:
                    ((PrivacyWindow) target).Loaded += new RoutedEventHandler(this.Window_Loaded);
                    return;

                case 2:
                    ((Grid) target).MouseLeftButtonDown += new MouseButtonEventHandler(this.Grid_MouseLeftButtonDown);
                    return;

                case 3:
                    this.BtnClose = (Button) target;
                    this.BtnClose.Click += new RoutedEventHandler(this.BtnClose_Click);
                    return;

                case 4:
                    this.switchPrivacy = (ToggleButton) target;
                    this.switchPrivacy.Checked += new RoutedEventHandler(this.switchLogin_Checked);
                    this.switchPrivacy.Unchecked += new RoutedEventHandler(this.switchLogin_Checked);
                    return;

                case 5:
                    this.progBarPrivacy = (ProgressBar) target;
                    return;

                case 6:
                    this.lblLoadingText = (TextBlock) target;
                    return;

                case 7:
                    this.lblName = (TextBlock) target;
                    return;

                case 8:
                    this.txtEmail = (TextBox) target;
                    this.txtEmail.TextChanged += new TextChangedEventHandler(this.txtEmail_TextChanged);
                    return;

                case 9:
                    this.lblPassword = (TextBlock) target;
                    return;

                case 10:
                    this.txtPassword = (TextBox) target;
                    this.txtPassword.TextChanged += new TextChangedEventHandler(this.txtPassword_TextChanged);
                    return;

                case 11:
                    this.lblCaptcha = (TextBlock) target;
                    return;

                case 12:
                    this.cmbCaptchaService = (ComboBox) target;
                    this.cmbCaptchaService.SelectionChanged += new SelectionChangedEventHandler(this.cmbCaptchaService_SelectionChanged);
                    return;

                case 13:
                    this.brGrid = (GroupBox) target;
                    return;

                case 14:
                    this.gvCards = (DataGrid) target;
                    this.gvCards.AutoGeneratingColumn += new EventHandler<DataGridAutoGeneratingColumnEventArgs>(this.gvCards_AutoGeneratingColumn);
                    this.gvCards.AutoGeneratedColumns += new EventHandler(this.gvCards_AutoGeneratedColumns);
                    this.gvCards.ContextMenuOpening += new ContextMenuEventHandler(this.gvCards_ContextMenuOpening);
                    return;

                case 15:
                    this.contextBtnDelete = (MenuItem) target;
                    this.contextBtnDelete.Click += new RoutedEventHandler(this.contextBtnDelete_Click);
                    return;

                case 0x10:
                    this.contextBtnSelectAll = (MenuItem) target;
                    this.contextBtnSelectAll.Click += new RoutedEventHandler(this.contextBtnSelectAll_Click);
                    return;

                case 0x11:
                    this.brNewPrivacyCard = (GroupBox) target;
                    return;

                case 0x12:
                    this.txtPrivacyNickName = (TextBox) target;
                    return;

                case 0x13:
                    this.rPrivacyMerchant = (RadioButton) target;
                    return;

                case 20:
                    this.rPrivacyBurner = (RadioButton) target;
                    return;

                case 0x15:
                    this.txtPrivacyLimit = (TextBox) target;
                    this.txtPrivacyLimit.PreviewTextInput += new TextCompositionEventHandler(this.txtCvv_PreviewTextInput);
                    return;

                case 0x16:
                    this.btnPrivacyAddCard = (Button) target;
                    this.btnPrivacyAddCard.Click += new RoutedEventHandler(this.btnPrivacyAddCard_Click);
                    return;
            }
            this._contentLoaded = true;
        }

        private void txtCvv_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            e.Handled = new Regex("[^0-9]+").IsMatch(e.Text);
        }

        private void txtEmail_TextChanged(object sender, TextChangedEventArgs e)
        {
            Global.SETTINGS.PrivacyEmail = this.txtEmail.Text.Trim();
            if (!string.IsNullOrEmpty(Global.SETTINGS.PrivacyEmail) && !string.IsNullOrEmpty(Global.SETTINGS.PrivacyPassword))
            {
                this.switchPrivacy.Opacity = 1.0;
                this.switchPrivacy.IsEnabled = true;
            }
            else
            {
                this.switchPrivacy.Opacity = 0.6;
                this.switchPrivacy.IsEnabled = false;
            }
        }

        private void txtPassword_TextChanged(object sender, TextChangedEventArgs e)
        {
            Global.SETTINGS.PrivacyPassword = this.txtPassword.Text.Trim();
            if (!string.IsNullOrEmpty(Global.SETTINGS.PrivacyEmail) && !string.IsNullOrEmpty(Global.SETTINGS.PrivacyPassword))
            {
                this.switchPrivacy.Opacity = 1.0;
                this.switchPrivacy.IsEnabled = true;
            }
            else
            {
                this.switchPrivacy.Opacity = 0.6;
                this.switchPrivacy.IsEnabled = false;
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            this.txtEmail.Text = Global.SETTINGS.PrivacyEmail;
            this.txtPassword.Text = Global.SETTINGS.PrivacyPassword;
            this.rPrivacyMerchant.IsChecked = true;
            this.LoadCaptcha();
            if (!string.IsNullOrEmpty(Global.SETTINGS.PrivacyEmail) && !string.IsNullOrEmpty(Global.SETTINGS.PrivacyPassword))
            {
                this.switchPrivacy.Opacity = 1.0;
                this.switchPrivacy.IsEnabled = true;
            }
        }
    }
}

